/*
 *   Copyright © Microsoft Open Technologies, Inc.
 *   All Rights Reserved        
 *   Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 *   the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 *   THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED,
 *   INCLUDING WITHOUT LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
 *   MERCHANTABLITY OR NON-INFRINGEMENT. 
 *   
 *   See the Apache 2 License for the specific language governing permissions and limitations under the License.
 */

/*
 * getUserMedia, MediaStream, MediaStreamTrack, MediaStreamTrackList
 * <http://dev.w3.org/2011/webrtc/editor/getusermedia.html>
 */


'use strict';

(function (global, ortc) {


    // MediaStreamTrack
    function MediaStreamTrack(deviceId) {
        var open = true;
        var plugin = ortc.getPlugin();

        EventTarget.call(this);

        if (!plugin.deviceIsAvailable(deviceId)) {
            throw new Error('invalid device ID');
        }

        console.log('Creating MediaStreamTrack', plugin.deviceGetName(deviceId));

        Object.defineReadOnlyProperty(this, 'id', ortc.util.generateId('mst-'));
        Object.defineReadOnlyProperty(this, 'kind', plugin.deviceGetType(deviceId).toLowerCase());
        Object.defineReadOnlyProperty(this, 'label', deviceId);
        Object.defineProperty(this, 'enabled', {
            get: function () {
                return open;
            },
            set: function (value) {
                throw new Error('not implemented');
            },
            enumerable: true
        });

        Object.defineReadOnlyProperty(this, 'remote', plugin.deviceGetDirection(deviceId) === 'RECEIVE');
        Object.defineReadOnlyProperty(this, 'readyState', 'LIVE'/*ё.LIVE*/);

        ['mute', 'unmute', 'ended', 'connected', 'disconnected'].forEach(this.defineEventProperty.bind(this));
    }

    Object.inherits(MediaStreamTrack, EventTarget);
    MediaStreamTrack.LIVE = 0;
    MediaStreamTrack.MUTED = 1;
    MediaStreamTrack.ENDED = 2;

    ortc.MediaStreamTrack = MediaStreamTrack;

    function MediaStreamTrackList() {
        var self = this;
        var list = [];

        EventTarget.call(this);

        Object.defineProperty(this, 'length', {
            get: function () {
                return list.length;
            },
            set: function () {
                throw new Error('can\'t set length');
            }
        });

        this.item = function (index) {
            index = parseInt(index, 10);
            return list[index];
        };

        this.add = function (track) {
            list.push(track);
            self.dispatchEvent(new Event('addtrack'));
        };

        this.remove = function (track) {
            var i = list.indexOf(track);
            if (i >= 0) {
                list.splice(i, 1);
                self.dispatchEvent(new Event('removetrack'));
            }
        };

        ['addtrack', 'removetrack', 'connected', 'disconnected'].forEach(this.defineEventProperty.bind(this));
    }

    Object.inherits(MediaStreamTrackList, EventTarget);


    function generateLabel() {
        return 'MediaStream_XXX_YYY';
    }


    // MediaStream
    function MediaStream(id) {
        EventTarget.call(this);

        Object.defineReadOnlyProperty(this, 'id', id ? id : ortc.util.generateId('ms-'));
        Object.defineReadOnlyProperty(this, 'label', generateLabel());
        Object.defineReadOnlyProperty(this, 'audioTracks', new MediaStreamTrackList());
        Object.defineReadOnlyProperty(this, 'videoTracks', new MediaStreamTrackList());

        this.ended = false;
        this.defineEventProperty('ended');
        this.defineEventProperty('connected');
        this.defineEventProperty('disconnected');
    }

    Object.inherits(MediaStream, EventTarget);

    MediaStream.prototype.addTrack = function (track) {
        if (track.kind === 'audio') {
            this.audioTracks.add(track);
        }

        if (track.kind === 'video') {
            this.videoTracks.add(track);
        }
    };

    ortc.MediaStream = MediaStream;

}((typeof window === 'object' ? window : global), ('undefined' !== typeof ortc) ? ortc : window));