/*
 *   Copyright © Microsoft Open Technologies, Inc.
 *   All Rights Reserved        
 *   Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 *   the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 *   THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED,
 *   INCLUDING WITHOUT LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
 *   MERCHANTABLITY OR NON-INFRINGEMENT. 
 *   
 *   See the Apache 2 License for the specific language governing permissions and limitations under the License.
 *   
 *   This code incorporates material from the Object RTC (ORTC) API for WebRTC community group specification draft
 *   dated 2013-11-03, obtained from http://www.w3.org/community/orca/.
 */

/*
 
 WEBIDL
 
 interface RTCDTMFHandler : EventTarget  {
    readonly    attribute DOMString     id;
    readonly    attribute DOMString     label;
    readonly    attribute DOMString     toneBuffer;
    readonly    attribute long          duration;
    readonly    attribute long          interToneGap;
    void insertDTMF (DOMString tones, optional long duration, optional long interToneGap);
                attribute EventHandler          ondtmf;
 };

*/


'use strict';

(function () {
    var g = ('undefined' !== typeof ortc) ? ortc : window;


    function RTCDTMFHandler(label, toneBuffer, duration, interToneGap) {

        Object.defineReadOnlyProperty(this, 'id', g.util.generateId('dtmf-'));
        Object.defineReadOnlyProperty(this, 'label', label);
        Object.defineReadOnlyProperty(this, 'toneBuffer', toneBuffer);
        Object.defineReadOnlyProperty(this, 'duration', duration);
        Object.defineReadOnlyProperty(this, 'interToneGap', interToneGap);

        this.defineEventProperty('dtmf');
    }


    Object.inherits(RTCDTMFHandler, EventTarget);

    //
    // insert dtmf tones to send.
    //
    RTCDTMFHandler.prototype.insertDTMF = function (tones, duration, interToneGap) {
    }


    g.RTCDTMFHandler = RTCDTMFHandler;

}());