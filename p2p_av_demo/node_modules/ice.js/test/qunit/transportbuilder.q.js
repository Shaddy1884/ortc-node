(function() {
    'use strict'; /*jshint browser:true,node:false*/
    /*global asyncTest,ok,start,icejs*/

    /** render something about the completed builder as a string */

    function builderString(b) {
        var bLocal = b.local;
        var bRemote = b.remote;
        var s = bLocal.ip + ':' + bLocal.port + '==>' + bRemote.ip + ':' + bRemote.port;
        return s;
    }

    /** the optional 'delay' argument delays the "signaling" of ports from this agent */

    function setupListeners(agent, otherAgent, doneCB, delay) {
        delay = delay || 0;
        agent.addEventListener('port', function(e) {
            setTimeout(function() {
                otherAgent.addRemote(e.port);
            }, delay);
        });

        if (doneCB) {
            agent.addEventListener('connect', doneCB);
        }
    }

    var tbOptions = {
        transport: {
            mode: 'rtp'
        }
    };

    function check(firstConnected, secondConnected, alpha, beta) {
        ok(firstConnected !== secondConnected, 'it\'s the other one');
        // show the pretty connections for all to see.
        ok(firstConnected.local.ip === secondConnected.remote.ip, builderString(firstConnected));
        ok(secondConnected.local.ip === firstConnected.remote.ip, builderString(secondConnected));
        ok(alpha.transport, 'a transport');
        ok(beta.transport, 'b transport');

        alpha.closeAll();
        beta.closeAll();
    }


    asyncTest('run two agents and connect successfully', function() {
        var alpha = new icejs.RealtimeTransportBuilder(tbOptions);
        var beta = new icejs.RealtimeTransportBuilder(tbOptions);
        var firstConnected;


        function done(e) {
            if(firstConnected) {
                var secondConnected = e;
                check(firstConnected, secondConnected, alpha, beta);
                start();
            } else {
                firstConnected = e;
            }
        }

        setupListeners(alpha, beta, done);
        setupListeners(beta, alpha, done);
        alpha.start();
        beta.start();
    });

    asyncTest('have the controllee get a late nomination', function() {
        var alpha = new icejs.RealtimeTransportBuilder({
            transport: {
                mode: 'rtp'
            },
            controlling: true
        });
        var beta = new icejs.RealtimeTransportBuilder(tbOptions);
        var firstConnected;

        function done(e) {
            if(firstConnected) {
                var secondConnected = e;
                check(firstConnected, secondConnected, alpha, beta);

                start();
            } else {
                firstConnected = e;
            }
        }

        setupListeners(alpha, beta, done, 300); // delay the sending of ports from alpha to beta
        setupListeners(beta, alpha, done);
        alpha.start();
        beta.start();
    });

    asyncTest('connect over and over', function() {

        var howMany = 5;
        var howManyDone = 0;

        var alpha;
        var beta;
        var firstConnected;

        function done(e) {
            if(firstConnected) {
                var secondConnected = e;
                check(firstConnected, secondConnected, alpha, beta);

                if(howManyDone++ < howMany) {
                    setTimeout(setupAndGo, 2);
                } else {
                    start();
                }
            } else {
                firstConnected = e;
            }
        }

        function setupAndGo() {
            alpha = new icejs.RealtimeTransportBuilder(tbOptions);
            beta = new icejs.RealtimeTransportBuilder(tbOptions);
            firstConnected = undefined;
            setupListeners(alpha, beta, done);
            setupListeners(beta, alpha, done);
            alpha.start();
            beta.start();
        }

        setupAndGo();

    });
}());