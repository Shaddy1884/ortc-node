/*
 *   Copyright © Microsoft Open Technologies, Inc.
 *   All Rights Reserved        
 *   Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 *   the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 *   THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED,
 *   INCLUDING WITHOUT LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
 *   MERCHANTABLITY OR NON-INFRINGEMENT. 
 *   
 *   See the Apache 2 License for the specific language governing permissions and limitations under the License.
 */

/**
 * getUserMedia, MediaStream, MediaStreamTrack, MediaStreamTrackList
 * <http://dev.w3.org/2011/webrtc/editor/getusermedia.html>
 */


'use strict';

(function (global, ortc) {

    function filterDevice(avtype, dir) {
        return function (deviceId) {
            var plugin = ortc.getPlugin();
            return plugin.deviceIsAvailable(deviceId) &&
                  (plugin.deviceGetDirection(deviceId) === dir) &&
                  (plugin.deviceGetType(deviceId) == avtype);
        };
    }

    function getDevice(audio, send) {
        var plugin = ortc.getPlugin();
        var devices = JSON.parse(plugin.getDeviceIds());

        if (devices.length === 1 && devices[0] === "-1") {
            return devices[0];
        }
        else {
            return devices.filter(filterDevice(audio ? 'AUDIO' : 'VIDEO', send ? 'SEND' : 'RECEIVE'))[0];
        }
    }

    ortc.util.getDevice = getDevice;

    function getUserMedia(constraints, callback, errCallback) {
        var audioDeviceId,
            videoDeviceId,
            audioTrack,
            videoTrack,
            stream;

        errCallback = (typeof errCallback === 'function') ? errCallback : function () { };
        if (typeof callback !== 'function') {
            errCallback('no callback');
            return;
        }

        if (!(constraints.audio || constraints.video)) {
            errCallback('no audio/video specified');
        }

        stream = new ortc.MediaStream();

        if (constraints.audio) {
            audioDeviceId = getDevice(true, true);

            if (!audioDeviceId) {
                errCallback('Audio device not found.');
            }
            else if (audioDeviceId === "-1") {
                errCallback('User denied permission to use audio/video device.');
                audioDeviceId = null;
            }
            else {
                audioTrack = new ortc.MediaStreamTrack(audioDeviceId);
                stream.audioTracks.add(audioTrack);
            }
        }

        if (constraints.video) {
            videoDeviceId = getDevice(false, true);

            if (!videoDeviceId) {
                errCallback('Video device not found.');
            }
            else if (videoDeviceId === "-1") {
                errCallback('User denied permission to use audio/video device.');
                videoDeviceId = null;
            }
            else {
                videoTrack = new ortc.MediaStreamTrack(videoDeviceId);
                stream.videoTracks.add(videoTrack);
            }
        }

        if (audioDeviceId || videoDeviceId) {
            callback(stream);
        }
    }

    ortc.getUserMedia = getUserMedia;

    function createObjectURL(stream) {
        var plugin = ortc.getPlugin();
        var tracks = stream.audioTracks;
        var audio;
        if (tracks.length <= 0) {
            return; // undefined
        }

        return 'about:media';
    }

    ortc.createObjectURL = createObjectURL;

}((typeof window === 'object' ? window : global), ('undefined' !== typeof ortc) ? ortc : window));