(function() {
    'use strict'; /*jshint browser:true,node:false*/
    /*global asyncTest,ok,start,icejs*/

    var local;
    var remote;
    var expected;
    var random = new ArrayBuffer(8);

    function closeAnything(thing) {
        thing.close();
    }

    function done(success) {
        ok(success === expected);
        local.close();
        remote.close();
        start();
    }

    function gotBoth() {
        if (!local || !remote) {
            return;
        }

        console.log('checking', JSON.stringify(local), JSON.stringify(remote));
        var checker = new icejs.RealtimePortPairChecker(local, remote, random, { roundTrip: 50 });
        checker.check(done);
    }

    function setLocal(port) {
        local = port;
        gotBoth();
    }

    function setRemote(port) {
        remote = port;
        gotBoth();
    }

    function gather(cb) {
        var gatherer = new icejs.RealtimePortGatherer(); // local only
        gatherer.addEventListener('done', function(e) {
            ok(e.target.ports.length > 0);
            e.target.ports.slice(1).forEach(closeAnything);
            cb(e.target.ports[0]);
        });
        gatherer.gather();
    }

    asyncTest('check some ports', function() {
        expected = true;
        local = null;
        remote = null;
        gather(setLocal);
        gather(setRemote);
    });

    asyncTest('fail a check (because the remote is closed)', function() {
        expected = false;
        local = null;
        remote = null;
        gather(setLocal);
        gather(function(port) {
            port.addEventListener('close', function() {
                setRemote(port);
            });
            port.close();
        });
    });
}());