(function(g) {
    'use strict'; /*jshint browser:true,node:true*/
    /*global b64 */

    exports['base64 encode/decode test'] = function(test) {
        var i;
        var inputBuffer = new ArrayBuffer(8);
        var input = new Uint8Array(inputBuffer);
        for (i = 0; i < input.byteLength; ++i) {
            input[i] = (Math.random() * 256) & 0xff;
        }

        var encodedBuf = b64.Encode(inputBuffer);
        var outputBuffer = b64.Decode(encodedBuf);

        var output = new Uint8Array(outputBuffer);
        for (i = 0; i < input.byteLength; ++i) {
            test.strictEqual(input[i], output[i]);
        }

        test.done();
    };

    /**
     * Create tests for encode and decode.
     * @param r {string} an ASCII string containing the raw data.
     * @param b {string} the encoded value of the string.
     */

    function testVector(r, b) {
        var i;
        var inputBuffer = new ArrayBuffer(r.length);
        var input = new Uint8Array(inputBuffer);
        for (i = 0; i < r.length; ++i) {
            input[i] = r.charCodeAt(i) & 0xff;
        }
        exports['encode "' + r + '" to "' + b + '"'] = function(test) {
            var output = b64.Encode(inputBuffer);
            test.strictEqual(output, b);
            test.done();
        };
        exports['decode "' + b + '" to "' + r + '"'] = function(test) {
            var outputBuffer = b64.Decode(b);
            var output = new Uint8Array(outputBuffer);
            test.strictEqual(input.length, output.length);
            for (i = 0; i < input.length; ++i) {
                test.strictEqual(input[i], output[i]);
            }
            test.done();
        };
    }

    testVector("", "");
    testVector("f", "Zg==");
    testVector("fo", "Zm8=");
    testVector("foo", "Zm9v");
    testVector("foob", "Zm9vYg==");
    testVector("fooba", "Zm9vYmE=");
    testVector("foobar", "Zm9vYmFy");
}(typeof window === 'object' ? window : global));