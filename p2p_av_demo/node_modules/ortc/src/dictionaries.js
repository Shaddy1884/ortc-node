/*
 *   Copyright © Microsoft Open Technologies, Inc.
 *   All Rights Reserved        
 *   Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 *   the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 *   THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED,
 *   INCLUDING WITHOUT LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
 *   MERCHANTABLITY OR NON-INFRINGEMENT. 
 *   
 *   See the Apache 2 License for the specific language governing permissions and limitations under the License.
 *   
 *   This code incorporates material from the Object RTC (ORTC) API for WebRTC community group specification draft
 *   dated 2013-11-03, obtained from http://www.w3.org/community/orca/.
 */


'use strict';/*global ArrayBuffer,Int32Array*/

(function () {

    var g = ('undefined' !== typeof ortc) ? ortc : window;


    // RTCIceServer
    function RTCIceServer(url, cred) {
        return {
            url: url,
            credential: cred
        };
    }

    g.RTCIceServer = RTCIceServer;

    // RTCConnectionOptions
    function RTCConnectionOptions(iceservers, socket) {
        return {
            iceServers: iceservers,
            socket: socket
        };
    }

    g.RTCConnectionOptions = RTCConnectionOptions;

    // RTCIceConnectionInfo
    function RTCIceConnectionInfo(unamefrag, pwd) {
        return {
            usernameFrag: unamefrag,
            password: pwd
        };
    }

    g.RTCIceConnectionInfo = RTCIceConnectionInfo;

    // RTCDtlsConnectionInfo
    function RTCDtlsConnectionInfo(fp) {
        return {
            fingerprint: fp
        };
    }

    g.RTCDtlsConnectionInfo = RTCDtlsConnectionInfo;

    // RTCConnectionSide
    function RTCConnectionSide(ice, dtls) {
        return {
            ice: ice,
            dtls: dtls
        };
    }

    g.RTCConnectionSide = RTCConnectionSide;

    // CertificateFingerprint
    function CertificateFingerprint(fp) {
        return fp;
    }

    g.CertificateFingerprint = CertificateFingerprint;

    // RTCIceCandidateDescription
    function RTCIceCandidateDescription(fdn, comp, trp, pri, cA, cP, typ, relA, relP) {
        return {
            foundation: fdn,
            component: comp,
            transport: trp,
            priority: pri,
            connectionAddress: cA,
            connectionPort: cP,
            type: typ,
            relAddress: relA,
            relPort: relP
        };
    }

    g.RTCIceCandidateDescription = RTCIceCandidateDescription;

    // RTCTrackFilter
    function RTCTrackFilter(stream, kind) {
        return {
            mediaStream: stream,
            kind: kind
        };
    }

    g.RTCTrackFilter = RTCTrackFilter;

    // RTCTrackDescription
    function RTCTrackDescription(kind, ssrc, msid, cds, mAtt, rtpExt) {
        return {
            kind: kind,
            ssrc: ssrc,
            msid: msid,
            codecs: cds,
            mediaAttributes: mAtt,
            rtpExtHeaders: rtpExt
        };
    }

    g.RTCTrackDescription = RTCTrackDescription;

    // RTCCodec
    function RTCCodec(pyId, name, clkrt, numCh, params) {
        return {
            payloadId: pyId,
            name: name,
            clockRate: clkrt,
            numChannels: numCh,
            params: params
        };
    }

    g.RTCCodec = RTCCodec;

    // RTCCodecParam
    function RTCCodecParam(name, value) {
        return {
            name: name,
            value: value
        };
    }

    g.RTCCodecParam = RTCCodecParam;

    // RTCMediaAttributes
    function RTCMediaAttributes(vdoWidth, vdoHeight) {
        return {
            videoMaxWidth: vdoWidth,
            videoMaxHeight: vdoHeight
        };
    }

    g.RTCMediaAttributes = RTCMediaAttributes;

    // RTCCapabilities
    function RTCCapabilities(acs, vcs) {
        return {
            audioCodecs: acs,
            videoCodecs: vcs
        };
    }

    g.RTCCapabilities = RTCCapabilities;

}());